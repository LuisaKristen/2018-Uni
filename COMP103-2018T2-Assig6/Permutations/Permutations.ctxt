#BlueJ class context
comment0.target=Permutations
comment0.text=\ \n\ \ Show\ all\ permutations\ of\ a\ list\ of\ items\n\ \ The\ items\ are\ names\ of\ image\ files\ (of\ emojis)\n\ \ Displays\ each\ possible\ permutation\ as\ a\ column\ of\ images.\n\ \ If\ there\ are\ too\ many\ for\ the\ screen,\ it\ highlights\ and\ keeps\ replacing\ the\ last\ column.\n\n\ \ For\ the\ core,\ you\ only\ have\ to\ write\ one\ method\ -\ the\ extendPermutations(...)\ method\n\ \ which\ does\ the\ recursive\ search.\ \ \n
comment1.params=
comment1.target=Permutations()
comment1.text=\n\ Construct\ a\ new\ Permutations\ object,\ setting\ up\ the\ GUI\n
comment10.params=items
comment10.target=void\ display(java.util.List)
comment10.text=\n\ Display\ a\ list\ of\ images\ in\ the\ next\ column.\n\ The\ list\ should\ have\ the\ names\ of\ the\ image\ files.\n\ Uses\ the\ field\ nextCol\ to\ specify\ where\ the\ column\ is.\n\ If\ there\ is\ room,\ it\ then\ moves\ to\ the\ next\ column,\ but\ if\n\ it\ is\ already\ at\ the\ end\ of\ the\ window,\ it\ highlights\ the\n\ column\ and\ draws\ over\ previous\ list\ (with\ a\ slight\ delay)\n
comment11.params=arguments
comment11.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\n\ Buttons\ to\ reset\ and\ run\ permutations.\n\ Mouse\ to\ select\ images\ to\ permute\n
comment3.params=
comment3.target=void\ findPermutations()
comment3.text=\n\ Finds\ and\ prints\ all\ permutations\ of\ the\ items\ in\ selectedList,\n\ by\ calling\ a\ recursive\ method,\ passing\ in\ a\ set\ of\ the\ items\ to\ permute\n\ and\ an\ empty\ list\ to\ build\ up.\n\ Prints\ the\ total\ number\ of\ permutations\ in\ the\ message\ window\ (with\n\ \ UI.printMessage(...);\n
comment4.params=permutationSoFar\ remaining
comment4.target=void\ extendPermutation(java.util.List,\ java.util.Set)
comment4.text=\n\ Recursive\ method\ to\ build\ all\ permutations\ possible\ by\ adding\ the\n\ \ remaining\ items\ on\ to\ the\ end\ of\ the\ permutation\ built\ up\ so\ far\ \n\ If\ there\ are\ no\ remaining\ items,\ then\ permutationSoFar\ is\ complete,\n\ \ \ so\ display\ permutationSoFar\ and\ increment\ permutationCount.\n\ \ \ Use\ the\ display(...)\ method\ to\ display\ a\ permutation\n\ Otherwise,\n\ \ for\ each\ of\ the\ remaining\ items,\n\ \ \ \ Extend\ the\ permutation\ with\ one\ of\ the\ item,\ and\n\ \ \ \ \ do\ a\ recursive\ call\ to\ extend\ it\ more\n\ \ \ \ \ -\ remove\ the\ item\ from\ remaining\ items\n\ \ \ \ \ -\ add\ it\ to\ the\ permutation\ so\ far\n\ \ \ \ \ -\ do\ the\ recursive\ call\ \n\ \ \ \ \ -\ remove\ the\ item\ from\ the\ end\ of\ the\ permutation\ and\n\ \ \ \ \ -\ put\ it\ back\ into\ the\ remaining\ items.\n\n\ Remember\:\ you\ can't\ modify\ a\ collection\ that\ you\ are\ currently\ iterating\ through\!\!\n\ \ you\ may\ need\ to\ make\ a\ copy\ of\ the\ remaining\ items\ to\ iterate\ through\ it.\n
comment5.params=
comment5.target=void\ findPermutationsIterativeHelper()
comment6.params=permutationSoFar
comment6.target=void\ findPermutationsIterative(java.util.List)
comment7.params=action\ x\ y
comment7.target=void\ doMouse(java.lang.String,\ double,\ double)
comment7.text=\n\ Select\ an\ image\ to\ add\ to\ the\ list\ to\ permute\n
comment8.params=
comment8.target=void\ reset()
comment8.text=\n\ Reset\ the\ selection\ and\ redisplay.\n\ Clears\ all\ the\ current\ permutations\n\ (but\ doesn't\ stop\ the\ current\ permutation\ search\ if\n\ it\ is\ running).\n
comment9.params=
comment9.target=void\ clear()
comment9.text=\n\ Clears\ the\ display\ of\ permutations\ and\ resets\ the\ nextCol\ back\ to\ 2.\n\ (the\ current\ permutation\ search\ continues\ running).\n
numComments=12
